def flatten_dict(d, parent_key="", sep="."):
    """
    Flattens a nested dictionary into a single-level dictionary.
    
    Parameters:
        d (dict): The nested dictionary to flatten.
        parent_key (str): The base key for recursion.
        sep (str): Separator to use for flattened keys.
    
    Returns:
        dict: A flattened dictionary.
    """
    items = []
    for k, v in d.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            items.extend(flatten_dict(v, new_key, sep).items())
        else:
            items.append((new_key, v))
    return dict(items)

# Example usage
nested = {"a": {"b": {"c": 1}}, "d": 2}
print(flatten_dict(nested))  # Output: {'a.b.c': 1, 'd': 2}
